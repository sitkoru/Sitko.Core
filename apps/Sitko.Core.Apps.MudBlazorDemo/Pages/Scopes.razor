@page "/Bars/Add"
@page "/Bars/{Id:guid}/Edit"
@inherits BaseComponent
<MudPageLayout Title="Edit" Breadcrumbs="Breadcrumbs" Description="Page description">
    <BarForm EntityId="Id" Debug="true">
        <MudPaper Class="pa-4">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Multiple file input</MudText>
                    <MudTextField Label="Bar" @bind-Value="@context.Entity.Bar" For="() => context.Entity.Bar"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Edit Foo</MudText>
                    @if (context.Entity.Foo is not null)
                    {
                        <MudTextField Label="Foo" @bind-Value="@context.Entity.Foo.Foo" For="() => context.Entity.Foo.Foo"></MudTextField>
                    }
                    <div>
                        <MudButton Class="mr-3" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => context.SetFoo()">Set foo</MudButton>
                        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="() => context.DeleteFoo()">Delete foo</MudButton>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Edit Foos</MudText>
                    @foreach (var foo in context.Entity.Foos)
                    {
                        <MudTextField Label="Foo" @bind-Value="@foo.Foo" For="() => foo.Foo" Class="mt-2"></MudTextField>
                        <MudButton Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" Class="mt-2" OnClick="() => context.RemoveFoo(foo)">Remove foo</MudButton>
                    }
                    <div>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => context.AddFoo()">Add foo</MudButton>
                    </div>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Current storage items</MudText>
                    @if (context.Entity.StorageItem is not null)
                    {
                        <MudText>Storage item: @context.Entity.StorageItem</MudText>
                    }
                    @foreach (var file in context.Entity.StorageItems)
                    {
                        <p>Storage item: @file</p>
                    }
                </MudItem>
                <MudItem xs="12">
                    <Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload
                        Label="Simple file input"
                        HelperText="Bla-bla-bla"
                        Storage="Storage"
                        @bind-Value="context.Entity.StorageItem"
                        For="() => context.Entity.StorageItem"
                        UploadPath="bars"
                        MaxFileSize="@(2 * 1024 * 1024)"
                        GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                    </Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Simple custom file input</MudText>
                    <Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload
                        Storage="Storage"
                        @bind-Value="context.Entity.StorageItem"
                        For="() => context.Entity.StorageItem"
                        UploadPath="bars"
                        MaxFileSize="@(2 * 1024 * 1024)"
                        GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                        <ChildContent Context="upload">
                            PRESS ME
                        </ChildContent>
                    </Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Multiple file input</MudText>
                        <MudFilesUpload
                            Storage="Storage"
                            TCollection="ValueCollection<StorageItem>"
                            @bind-Value="context.Entity.StorageItems"
                            For="() => context.Entity.StorageItems"
                            UploadPath="bars"
                            MaxFileSize="@(2 * 1024 * 1024)"
                            GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                        </MudFilesUpload>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Single image</MudText>
                    <Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload
                        Storage="Storage"
                        DisplayMode="FileUploadDisplayMode.Image"
                        @bind-Value="context.Entity.StorageItem"
                        For="() => context.Entity.StorageItem"
                        UploadPath="bars"
                        MaxFileSize="@(2 * 1024 * 1024)"
                        GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                    </Sitko.Core.Blazor.MudBlazorComponents.MudFileUpload>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="pa-4">
                        <MudText Typo="Typo.h6" Class="mb-4">Multiple image</MudText>
                        <MudFilesUpload
                            Storage="Storage"
                            TCollection="ValueCollection<StorageItem>"
                            DisplayMode="FileUploadDisplayMode.Image"
                            @bind-Value="context.Entity.StorageItems"
                            For="() => context.Entity.StorageItems"
                            UploadPath="bars"
                            MaxAllowedFiles="5"
                            MaxFileSize="@(2 * 1024 * 1024)"
                            GenerateMetadata="@((_, _) => GenerateMetadataAsync())">
                        </MudFilesUpload>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Class="mt-2 pa-3">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!context.CanSave())" OnClick="@context.SaveEntityAsync">Save</MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@(!context.HasChanges)" OnClick="@context.ResetAsync">Reset</MudButton>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </BarForm>
</MudPageLayout>

@code {

    [Parameter]
    public Guid Id { get; set; }

    private IStorage<TestRemoteStorageOptions> Storage => GetRequiredService<IStorage<TestRemoteStorageOptions>>();

    private static Task<object> GenerateMetadataAsync()
    {
        var metadata = new BarStorageMetadata();
        return Task.FromResult<object>(metadata);
    }

    public List<BreadcrumbItem> Breadcrumbs { get; set; } = new()
    {
        new BreadcrumbItem("Foo1", "/"),
        new BreadcrumbItem("Bar", "/")
    };

}
