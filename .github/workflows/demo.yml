name: Demo

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    container: ghcr.io/sitkoru/actions-container
    env:
      FRONTNED_PROJECT: Sitko.Core.Blazor.AntDesign
      DEMO_PROJECT: Sitko.Core.Apps.Blazor
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: 'Get next minor version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Prepare
        id: prep
        shell: bash
        env:
          next_version: ${{ steps.semvers.outputs.patch }}
        run: |
          VERSION=$next_version-`date "+%y%m%d%H%M"`
          DOCKER_IMAGE=ghcr.io/sitkoru/blazor-demo
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE},${DOCKER_IMAGE}:${{ github.run_id }}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=version::${VERSION}
      - name: Install node.js
        uses: actions/setup-node@v2.4.0
        with:
          node-version: '15'
          cache: 'npm'
          cache-dependency-path: |
            src/Sitko.Core.Blazor.AntDesign/Web/package.json
      - name: Install .NET Core 3.1
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '3.1.x'
      - name: Install .NET 5.0.x
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '5.0.x'
      - name: Install .NET 6.0.x
        uses: actions/setup-dotnet@v1.8.2
        with:
          dotnet-version: '6.0.x'
          include-prerelease: true
      - name: Build blazor js
        working-directory: src/${{ env.FRONTNED_PROJECT }}/Web
        shell: bash
        run: |
          npm ci
          npm run prod
      - name: Publish demo
        run: dotnet publish apps/${{ env.DEMO_PROJECT }}/${{ env.DEMO_PROJECT }}.csproj --output /app/ -c Release /p:Version=${{ steps.prep.outputs.version }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Build and push demo image
        uses: docker/build-push-action@v2
        with:
          file: ./apps/${{ env.DEMO_PROJECT }}/Dockerfile
          context: /app
          build-args: version=${{ steps.prep.outputs.version }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}
      - name: Update production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            export VERSION=${{ steps.prep.outputs.version }}
            cd ${{ secrets.HOST_WORKING_DIR }}
            ./${{ secrets.HOST_COMPOSE_SCRIPT }} up -d ${{ secrets.SERVICE_NAME_DEMO }}


